module;
/**
 * filesystem.cpp2
 *
 * Copyright (C) 2024 Mateusz Stadnik <matgla@live.com>
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version
 * 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General
 * Public License along with this program. If not, see
 * <https://www.gnu.org/licenses/>.
 */

#include <cerrno>

export module yasboot.filesystem;

yasboot: namespace = {
fs: namespace = {

export FileSystemError: @enum<i32> type = {
  Success := 0;
  Unknown;
  InputOutput := EIO;
  InvalidArgument := EINVAL;
  NoEntry := ENOENT;
  NotDirectory := ENOTDIR;
  Directory := EISDIR;
  NotEmpty := ENOTEMPTY;
  BadFileDescriptor := EBADF;
  FileTooLarge := EFBIG;
  NoSpaceLeft := ENOSPC;
  NoMemoryLeft := ENOMEM;
  FileNameTooLong := ENAMETOOLONG;
}

export FileSystem: @interface type = {
  mount: (inout this) -> std::expected<void, FileSystemError>;
  open: (inout this, path: std::string_view, flags: i32) -> std::expected<i32, FileSystemError>;
  close: (inout this, fd: i32) -> std::expected<i32, FileSystemError>;
  has_fd: (this, fd: i32) -> bool;
  read: (inout this, fd: i32, buffer: std::span<u8>) -> std::expected<i32, FileSystemError>;
  seek: (inout this, fd: i32, offset: off_t, whence: i32) -> std::expected<off_t, FileSystemError>;
}

} // namespace fs
} // namespace yasboot
