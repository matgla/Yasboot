module;
/**
 * app.cpp2
 *
 * Copyright (C) 2024 Mateusz Stadnik <matgla@live.com>
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version
 * 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General
 * Public License along with this program. If not, see
 * <https://www.gnu.org/licenses/>.
 */


export module yasboot.app;

import hal.system.disk;
import yasboot.mbr;

import yasboot.filesystem.disk_parameters;
import yasboot.filesystem.littlefs;
import yasboot.filesystem.filesystem_mount_points;
import yasboot.filesystem;


yasboot: namespace = {

export AppData: @copyable type = {
  print_hello: () = {
    printf("\n\n");
    printf("============== YASBOOT ===============\n");
  }

  initialize: () = {
    print_hello();
  }

  mount_disks: () = {
    printf("Mounting disks\n");
  }
 
  prepare_boot_parition: (inout this) = {
    p:= mbr_.get_bootable_partition(); 
    if (p) {
      printf("Found bootable partition at: %lx, size: %ld\n", p*.lba_start, p*.number_of_sectors);
      params:= yasboot::filesystem::DiskParameters(
        4,
        4, 
        4096,
        (p*.number_of_sectors * 512) >> 12
      ); 

      offset:= p*.lba_start * 512;
      fs : std::unique_ptr<yasboot::fs::FileSystem> = new<yasboot::fs::LittleFS>(params, 
        : (address: std::size_t, buffer: std::span<u8>) -> int = {
          flash: yasboot::hal::InternalFlash = ();
          if (buffer.size() == flash.read(address + offset$, buffer)) {
             return 0;
          }
          return -1;
        }
      ); 
//       s:= fs*.mount();
//       if (s)
//       {
//         printf("Mounted successfuly\n");
//         if (yasboot::fs::FileSystemMountPoints::get().register_mount_point("/boot", move fs) >= 0) {
//           boot_partition_mounted_ = true;
//         }
//       }
//       else
//       {
//         printf("Mounting failure\n");
//       }
//     }
//     else 
//     {
//       printf("%s\n", p.error().data());
    }
  }
 
  operator=:(out this) = {
  }
 
  has_valid_mbr: (this) -> bool = {
    return mbr_.is_valid_mbr();
  }
 
  disk_: ::hal::system::Disk = ();
  mbr_: yasboot::MbrParser = (disk_);
  boot_partition_mounted_: bool = (false);
}

}
