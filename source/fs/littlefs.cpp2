module;
/**
 * littlefs.cpp2
 *
 * Copyright (C) 2024 Mateusz Stadnik <matgla@live.com>
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version
 * 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General
 * Public License along with this program. If not, see
 * <https://www.gnu.org/licenses/>.
 */


#include <fcntl.h>
#include <map>

#include <span>
  
#include <lfs.h>

import yasboot.filesystem.file_descriptors; 
import yasboot.filesystem;

export module yasboot.filesystem.littlefs;
 
export import yasboot.filesystem.disk_parameters;
 
using ConstLfsConfig = const lfs_config *;
export yasboot: namespace = {
fs: namespace = {
  LittleFS: type = {
    ReadFromDisk: type == std::function<int(std::size_t, std::span<u8>)>; 
    
    this: FileSystem = (); 

    operator=: (out this, in disk: filesystem::DiskParameters, in read_from_disk: ReadFromDisk) = {
      read_ = read_from_disk;
      config_ = lfs_config(
        this&,
        lfs_read_callback,
        nullptr,
        nullptr,
        nullptr,
        disk.read_size,
        0,
        disk.block_size,
        disk.block_count,
        600,
        256,
        16,
        cpp2::unsafe_narrow<lfs_size_t>(0.8 * disk.block_size), 
        nullptr,
        nullptr,
        nullptr,
        LFS_NAME_MAX,
        LFS_FILE_MAX,
        LFS_ATTR_MAX,
        disk.block_size,
        0
      );
    }

    public mount: (override inout this) -> std::expected<void, FileSystemError> = {
      ec:= lfs_mount(lfs_&, config_&);
      if (ec != LFS_ERR_OK) {
        return lfs_error_to_filesystem_error(ec);
      }
      return ();
    }
 
    public open: (override inout this, path: std::string_view, flags: i32) -> std::expected<i32, FileSystemError> = {
      fd:= yasboot::fs::FileDescriptors::get().allocate();
      if (fd == -1) {
        return std::unexpected(FileSystemError::InvalidArgument);
      }
      files_[fd] = ();
      ec:= lfs_file_open(lfs_&, files_[fd]&, path.data(), convert_flags(flags));
      
      if (ec != LFS_ERR_OK) {
          yasboot::fs::FileDescriptors::get().release(fd);
          return lfs_error_to_filesystem_error(ec);
      }

      return fd;
    }

    public has_fd: (override this, fd: i32) -> bool = {
      if (fd < 0 || fd > std::numeric_limits<i8>::max()) {
        return false;
      }
      return files_.contains(cpp2::unsafe_narrow<i8>(fd));
    }

    public read: (override inout this, fd: i32, buffer: std::span<u8>) -> std::expected<i32, FileSystemError> =
    {
      if (!has_fd(fd)) {
        return -1;
      }

      return lfs_file_read(lfs_&, files_[cpp2::unsafe_narrow<i8>(fd)]&, buffer.data(),
                         buffer.size());
    }

    public close: (override inout this, fd: i32) -> std::expected<i32, FileSystemError> = {
      if (!has_fd(fd)) {
        return std::unexpected(FileSystemError::InvalidArgument); 
      }
      ec:= lfs_file_close(lfs_&, files_[cpp2::unsafe_narrow<i8>(fd)]&);
      if (ec != LFS_ERR_OK) {
        return lfs_error_to_filesystem_error(ec);
      }
      return fd;
    }

    private convert_whence: (whence: i32) -> i32 = {
      if (whence == SEEK_SET) { return LFS_SEEK_SET; }
      if (whence == SEEK_CUR) { return LFS_SEEK_CUR; }
      if (whence == SEEK_END) { return LFS_SEEK_END; }
      return -1;
    }
    
    public seek: (override inout this, fd: i32, offset: off_t, whence: i32) -> std::expected<off_t, FileSystemError> = {
      if (!has_fd(fd)) {
        return std::unexpected(FileSystemError::InvalidArgument); 
      }

      w:= convert_whence(whence);
      if (w == -1) { 
        return std::unexpected(FileSystemError::InvalidArgument);
      }
      r:= lfs_file_seek(lfs_&, files_[cpp2::unsafe_narrow<i8>(fd)]&, offset, w);
      if (r < 0) {
        return lfs_error_to_filesystem_error(r);
      }
      return r;
    }

    convert_flags: (in flags: i32) -> i32 = {
      result: i32 = 0;
      if ((flags & O_RDONLY) != 0) { result |= LFS_O_RDONLY; }
      return result;
    }

    private lfs_error_to_filesystem_error: (ec: i32) -> std::unexpected<FileSystemError> = {
      if (ec == LFS_ERR_OK)           { return std::unexpected(FileSystemError::Success); }
      if (ec == LFS_ERR_NOENT)        { return std::unexpected(FileSystemError::NoEntry); }
      if (ec == LFS_ERR_EXIST)        { return std::unexpected(FileSystemError::NotDirectory); }
      if (ec == LFS_ERR_ISDIR)        { return std::unexpected(FileSystemError::Directory); }
      if (ec == LFS_ERR_NOTEMPTY)     { return std::unexpected(FileSystemError::NotEmpty); }
      if (ec == LFS_ERR_BADF)         { return std::unexpected(FileSystemError::BadFileDescriptor); }
      if (ec == LFS_ERR_FBIG)         { return std::unexpected(FileSystemError::FileTooLarge); }
      if (ec == LFS_ERR_INVAL)        { return std::unexpected(FileSystemError::InvalidArgument); }
      if (ec == LFS_ERR_NOSPC)        { return std::unexpected(FileSystemError::NoSpaceLeft); }
      if (ec == LFS_ERR_NOMEM)        { return std::unexpected(FileSystemError::NoMemoryLeft); }
      if (ec == LFS_ERR_NOATTR)       { return std::unexpected(FileSystemError::InvalidArgument); }
      if (ec == LFS_ERR_NAMETOOLONG)  { return std::unexpected(FileSystemError::FileNameTooLong); }
      return std::unexpected(FileSystemError::Unknown);
    }
    
    private lfs_read_callback: (in c: ConstLfsConfig, block: lfs_block_t, off: lfs_off_t, 
      buffer: *void, size: lfs_size_t) -> int = {
        o:= cpp2::unsafe_narrow<* LittleFS>(c*.context);
        return o*.read_(block * c*.block_size + off, std::span<uint8_t>(cpp2::unsafe_narrow<*uint8_t>(buffer), size));//, std::span<uint8_t>(); 
    }

    read_: ReadFromDisk = ();
    config_: lfs_config = ();
    files_: std::map<i8, lfs_file_t> = ();
    lfs_: lfs_t = ();
  } 
} // namespace filesystem
} // namespace yasboot
 
