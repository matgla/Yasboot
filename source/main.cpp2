/**
 * main.cpp2
 *
 * Copyright (C) 2024 Mateusz Stadnik <matgla@live.com>
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version
 * 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General
 * Public License along with this program. If not, see
 * <https://www.gnu.org/licenses/>.
 */

#include <boost/sml.hpp>

import hal.uart;
import hal.system.io;
//import hal.system.disk;
//import yasboot.mbr;

//import hal.flash;
//import yasboot.filesystem.littlefs;
//import yasboot.filesystem.filesystem_mount_points;
import yasboot.app;

// This must be C++ class due to ref-qualified member function bug in boost::sml
class App {
  public:
    auto operator()() {
      using namespace boost::sml;
       
      const auto has_valid_mbr = [this]{ return data_.has_valid_mbr(); };
      return boost::sml::make_transition_table(
    //  +      FROM      +    EVENT     +      GUARD       +                 ACTION                     +  DESTINATION  +
        *"initialize"_s                                    / [this]{ data_.initialize(); }              = "mount_disks"_s  
        ,"mount_disks"_s + on_entry<_>                     / [this]{ data_.mount_disks(); }                              
        ,"mount_disks"_s                 [has_valid_mbr]   / [this]{ printf("Disks mounted\n"); }       = "find_boot"_s
        ,"find_boot"_s                                     / [this]{ data_.prepare_boot_parition(); }   = X
      );
    }

  private:
    yasboot::AppData data_;
};


main: () = {
  uart: yasboot::hal::Uart<0> = (115200);

  yasboot::hal::system::io::set_global_write(: (str: std::string_view) -> std::size_t = 
    uart$.write(str));

  data: App = ();
  sm: boost::sml::sm<App> = (data);
}

